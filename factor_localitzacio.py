# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FactorLocalitzacio
                                 A QGIS plugin
 Aquest plugin calcula el factor de localització per a una valoració de sòl rural
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by David Castellvell Buchaca
        email                : dcastellvell@gencat.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis import processing
from qgis.core import QgsProject, QgsField, QgsVectorLayer, QgsProcessingFeatureSourceDefinition
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .factor_localitzacio_dialog import FactorLocalitzacioDialog
import os.path


class FactorLocalitzacio:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FactorLocalitzacio_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Factor Localitzacio')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FactorLocalitzacio', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/factor_localitzacio/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calcula el factor de localització'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Factor Localitzacio'),
                action)
            self.iface.removeToolBarIcon(action)

    
    def run(self):
        """Run method that performs all the real work"""  
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FactorLocalitzacioDialog()

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBoxPunt from previous runs
        self.dlg.comboBoxPunt.clear()
        # Populate the comboBoxPunt with names of all the loaded layers
        self.dlg.comboBoxPunt.addItems([layer.name() for layer in layers])
        # Clear the contents of the comboBoxMunisPob from previous runs
        #self.dlg.comboBoxMunisPob.clear()
        # Populate the comboBoxMunisPob with names of all the loaded layers
        #self.dlg.comboBoxMunisPob.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            selectedLayerPunt = self.dlg.comboBoxPunt.currentIndex()
            layer_punt = layers[selectedLayerPunt].layer()

            #features = layer_punt.selectedFeatures()
            selected_feature_count = layer_punt.selectedFeatureCount()
            if selected_feature_count == 0:
                QMessageBox.information(iface.mainWindow(), "Falta selecció", f"Has de seleccionar un punt")
            if selected_feature_count > 1:
                QMessageBox.information(iface.mainWindow(), "Massa punt seleccionats", f"Hi ha més d'un punt seleccionat")
            if selected_feature_count == 1:
                #selectedLayerMunisPob = self.dlg.comboBoxMunisPob.currentIndex()
                #layer_munis_pob = layers[selectedLayerMunisPob].layer()
                layer_folder = self.plugin_dir +'\\capa_poblacio/'
                filename = 'capsmunispoblacio.gpkg|layername=caps_munis_poblacio'
                layer_path = layer_folder + filename
                layer_name = 'caps_munis_poblacio'
                provider_name = 'ogr'

                layer_munis_pob = QgsVectorLayer(layer_path, layer_name, provider_name)
                QgsProject.instance().addMapLayer(layer_munis_pob)
                iface.setActiveLayer(layer_munis_pob)
                iface.zoomToActiveLayer()

                '''Realitzem un buffer de 4 km del punt d'ubicació'''
                parameters_buffer_4 = {'INPUT': QgsProcessingFeatureSourceDefinition(layer_punt.id(), selectedFeaturesOnly=True),
                                        'CRS': 'EPSG:25831',
                                        'DISTANCE':4000,
                                        'SEGMENTS':5,
                                        'END_CAP_STYLE':0,
                                        'JOIN_STYLE':0,
                                        'MITER_LIMIT':2,
                                        'DISSOLVE':False,
                                        'OUTPUT': "memory:{}".format('buffer_4')}
                buffer_4 = processing.run("native:buffer", parameters_buffer_4)
                lyr_buffer_4 = QgsProject.instance().addMapLayer(buffer_4['OUTPUT'])
                lyr_buffer_4.loadNamedStyle(self.plugin_dir +'\\qml_styles\\buffer_4K_style.qml',True)
                
                '''Realitzem un buffer de 40 km del punt d'ubicació'''
                parameters_buffer_40 = {'INPUT': QgsProcessingFeatureSourceDefinition(layer_punt.id(), selectedFeaturesOnly=True),
                                        'CRS': 'EPSG:25831',
                                        'DISTANCE':40000,
                                        'SEGMENTS':5,
                                        'END_CAP_STYLE':0,
                                        'JOIN_STYLE':0,
                                        'MITER_LIMIT':2,
                                        'DISSOLVE':False,
                                        'OUTPUT': "memory:{}".format('buffer_40')}
                buffer_40 = processing.run("native:buffer", parameters_buffer_40)

                '''Obtenim la diferencia entre el bufer de 40 i el de 4'''
                parameters_difference_4_40 = {'INPUT': buffer_40['OUTPUT'],
                                'OVERLAY': buffer_4['OUTPUT'], 
                                'OUTPUT': "memory:{}".format('diffrence_4_40')}
                difference_4_40 = processing.run("native:difference", parameters_difference_4_40)
                lyr_difference_4_40 = QgsProject.instance().addMapLayer(difference_4_40['OUTPUT'])
                lyr_difference_4_40.loadNamedStyle(self.plugin_dir +'\\qml_styles\\difference_4_40K_style.qml',True)
                            
                '''Retallem la capa de municipis i població amb el buffer de 4'''
                parameters_clip_4 = {'INPUT': layer_munis_pob,
                                'OVERLAY': buffer_4['OUTPUT'], 
                                'OUTPUT': "memory:{}".format('munis_4')}
                clip_4 = processing.run("native:clip", parameters_clip_4)
                munis_4 = QgsProject.instance().addMapLayer(clip_4['OUTPUT'])
                munis_4.loadNamedStyle(self.plugin_dir +'\\qml_styles\\punts_4K_style.qml',True)
                
                '''generem un camp anomenat "variabe"'''
                provider = munis_4.dataProvider()
                var_field = QgsField("variable", QVariant.String)
                provider.addAttributes([var_field])
                munis_4.updateFields()
                '''Editem "variable" = 'p1' '''
                colIdvar = provider.fieldNameIndex('variable')
                munis_4.startEditing()
                for feature in munis_4.getFeatures():
                    var = 'p1'
                    munis_4.changeAttributeValue(feature.id(), colIdvar, var)
                munis_4.commitChanges()

                '''Retallem la capa de municipis i població amb el buffer de 4_40'''
                parameters_clip_4_40 = {'INPUT': layer_munis_pob,
                                'OVERLAY': difference_4_40['OUTPUT'], 
                                'OUTPUT': "memory:{}".format('munis_4_40')}
                clip_4_40 = processing.run("native:clip", parameters_clip_4_40)
                munis_4_40 = QgsProject.instance().addMapLayer(clip_4_40['OUTPUT'])
                munis_4_40.loadNamedStyle(self.plugin_dir +'\\qml_styles\\punts_4_40K_style.qml',True)
                
                '''generem un camp anomenat "variabe"'''
                provider = munis_4_40.dataProvider()
                var_field = QgsField("variable", QVariant.String)
                provider.addAttributes([var_field])
                munis_4_40.updateFields()
                '''Editem "variable" = 'p2' '''
                colIdvar = provider.fieldNameIndex('variable')
                munis_4_40.startEditing()
                for feature in munis_4_40.getFeatures():
                    var = 'p2'
                    munis_4_40.changeAttributeValue(feature.id(), colIdvar, var)
                munis_4_40.commitChanges()

                '''obtenim el valor de p1 sumant tots els valors de població (atribut censvalue) usant l'algoritme de processing aggregate, 
                agrupant tots els registres de la capa munis 4 per valor de l'atribut 'variable' '''
                parameters_agg_4 = {'INPUT':munis_4,'GROUP_BY':'"variable"',
                                        'AGGREGATES':[{'aggregate': 'first_value','delimiter': ',','input': '"censany"','length': 0,'name': 'censnom','precision': 0,'sub_type': 0,'type': 10,'type_name': 'text'},{'aggregate': 'sum','delimiter': ',','input': '"censvalor"','length': 10,'name': 'censvalor','precision': 0,'sub_type': 0,'type': 2,'type_name': 'integer'},{'aggregate': 'concatenate_unique','delimiter': ',','input': '"variable"','length': 0,'name': 'variable','precision': 0,'sub_type': 0,'type': 10,'type_name': 'text'}],
                                        'OUTPUT':"memory:{}".format('p1')}
                agg_4 = processing.run("native:aggregate", parameters_agg_4)
                layer_p1= QgsProject.instance().addMapLayer(agg_4['OUTPUT'])
                

                '''obtenim el valor de p2 sumant tots els valors de població (atribut censvalue) usant l'algoritme de processing aggregate, 
                agrupant tots els registres de la capa munis 4_40 per valor de l'atribut 'variable' '''
                parameters_agg_4_40 = {'INPUT':munis_4_40,'GROUP_BY':'"variable"',
                                        'AGGREGATES':[{'aggregate': 'first_value','delimiter': ',','input': '"censany"','length': 0,'name': 'censnom','precision': 0,'sub_type': 0,'type': 10,'type_name': 'text'},{'aggregate': 'sum','delimiter': ',','input': '"censvalor"','length': 10,'name': 'censvalor','precision': 0,'sub_type': 0,'type': 2,'type_name': 'integer'},{'aggregate': 'concatenate_unique','delimiter': ',','input': '"variable"','length': 0,'name': 'variable','precision': 0,'sub_type': 0,'type': 10,'type_name': 'text'}],
                                        'OUTPUT':"memory:{}".format('p2')}
                agg_4_40 = processing.run("native:aggregate", parameters_agg_4_40)
                layer_p2 = QgsProject.instance().addMapLayer(agg_4_40['OUTPUT'])

                '''accedim al valor de p1 i de p2'''
                layer_p1.fields().names()
                layer_p2.fields().names()

                field_name = 'censvalor'

                p1_value = 0  # Valor per defecte

                if layer_p1 is not None:
                
                    # Get feature count
                #    feature_count = layer_p1.featureCount()
                #    selected_feature_count = active_layer.selectedFeatureCount()
                #    print(f"Number of features: {feature_count}")
                #    print(f"Number of selected features: {selected_feature_count}")

                    # Iterate over his selected features 
                    features = layer_p1.getFeatures()
                    for feature in features:

                        # Retrieve every feature with its attributes
                #        print("<br><br>Feature ID %d: " % feature.id())

                #        print(field_names)

                        # Get attributes list. It contains all the attribute values of this feature    
                #        attrs = feature.attributes()
                #        print(attrs)
                        
                        # Attributes can be referred to by their name or index
                        p1_value = feature[field_name]
                #        print(feature.attribute(field_name))
                        print(f"població p1: {feature[field_name]}")

                if layer_p2 is not None:
                    
                    # Get feature count
                #    feature_count = layer_p2.featureCount()
                #    selected_feature_count = active_layer.selectedFeatureCount()
                #    print(f"Number of features: {feature_count}")
                #    print(f"Number of selected features: {selected_feature_count}")

                    # Iterate over his selected features 
                    features = layer_p2.getFeatures()
                    for feature in features:

                        # Retrieve every feature with its attributes
                #        print("<br><br>Feature ID %d: " % feature.id())

                #        print(field_names)

                        # Get attributes list. It contains all the attribute values of this feature    
                #        attrs = feature.attributes()
                #        print(attrs)
                        
                        # Attributes can be referred to by their name or index
                        p2_value =feature[field_name]
                #        print(feature.attribute(field_name))
                        print(f"població p2: {feature[field_name]}")

                '''Calculem el factor u1'''        
                u1 = (1 + (p1_value + p2_value / 3) / 1000000)
                print (f"valor U1: {u1}")

                '''Accedim al valor de la distància i el passem a una variable i calculem u2'''
                dist_text = self.dlg.lineEditDist.text()
                dist_value = float(dist_text.replace(',','.'))
                print (f"distància d: {dist_value}")
                u2 = 1.6-0.01 * dist_value
                print (f"valor U2: {u2}")

                '''Accedim al valor de les variables t i d, les passem a una variable, les covertim a float i calculem u3'''
                p_text = self.dlg.lineEditPaisatge.text()
                p_value = float(p_text.replace(',','.'))
                print (f"coeficient p: {p_value}")

                t_text = self.dlg.lineEditUsos.text()
                t_value = float(t_text.replace(',','.'))
                print (f"coeficient t: {t_value}")
                u3 = 1.1+0.1 * (p_value + t_value)
                print (f"valor U3: {u3}")

                FL = u1 * u2 * u3
                print (f"Factor Localització = {u3}")

                '''Eliminem les capes sobrants'''
                QgsProject.instance().removeMapLayer(layer_p1)
                QgsProject.instance().removeMapLayer(layer_p2)
                QgsProject.instance().removeMapLayer(layer_munis_pob)

                '''Missatges d'advertencia si alguna variable supera els valors establerts al Real Decreto 1492/2011 '''
                if dist_value > 60:
                    QMessageBox.information(iface.mainWindow(), "Distància superada", f"La ditància <b>d</b> no hauria de ser superior a 60 km")
                
                if p_value > 2:
                    QMessageBox.information(iface.mainWindow(), "variable p superada", f"El valor de la variable <b>p</b> no hauria de ser superior a 2")
                
                if t_value > 7:
                    QMessageBox.information(iface.mainWindow(), "variable t superada", f"El valor de la variable <b>t</b> no hauria de ser superior a 7")
        
                '''Missatge amb tota la informació de valors '''
                QMessageBox.information(iface.mainWindow(), "Factor localització", f"El valor de la variable <b>p1</b> és de {p1_value}<br><br>El valor de la variable <b>p2</b> és de {p2_value}<br><br>El factor <b>U1</b> = {u1}<br><br>El valor de la variable <b>d</b> és de {dist_value} km<br><br>El factor <b>U2</b> = {u2}<br><br>El valor del coeficient <b>p</b> és de {p_value}<br><br>El valor del coeficient <b>t</b> és de {t_value}<br><br>El factor <b>U3</b>= {u3}<br><br><b>FACTOR LOCALITZACIÓ = {FL}</b>")

                '''Netejem el panell'''
                self.dlg.lineEditDist.clear()
                self.dlg.lineEditPaisatge.clear()
                self.dlg.lineEditUsos.clear()
                '''Movem la capa buffer_4 a la tercera posició dins del TOC per a que estigui per damunt de l'altre buffer'''
                root = QgsProject.instance().layerTreeRoot()
                vl = QgsProject.instance().mapLayersByName("buffer_4")[0]
                
                # create a QgsLayerTreeLayer object from vl by its id
                myvl = root.findLayer(vl.id())
                # clone the myvl QgsLayerTreeLayer object
                myvlclone = myvl.clone()
                # get the parent. If None (layer is not in group) returns ''
                parent = myvl.parent()
                # move the cloned layer to the 3 position
                parent.insertChildNode(2, myvlclone)
                # remove the original myvl
                root.removeChildNode(myvl)
                            
                pass
